import binascii
 
n = 98569125653363357820467245618206950530113082425036250311822694872482487191228160771708467668621264997864469005848030935939121603565722839926170041897992152388489632646533677622364184077853123531162040607725666774411263427111203237060701401211738306096186205226117272786376699701506822839257705696192965619259    # p*q = modulus
e = 65537
d = 70896614813742496008990112821017734014197636134570681709548776887850824438410562620455525107396877938711496406574369932378630607883806753870940132062614296394104809715085912814648351760895917349325198950027687667419406152131474987641169328317222949697437624902641701206318798996725737564230540885082763330769
 
#message="703084636222302833"
#print('message                 ', message)
 
#hex_data   = binascii.hexlify(message.encode())
#print('hex data                ', hex_data)
 
plain_text =9281472211341752261340201051684212121147221134175226134020105161546237035106531608040201051672211341752261340201051605161928147221134175226134020105160
#int(hex_data, 16)
print('plain text integer      ', plain_text)
 
if plain_text > n:
  raise Exception('plain text too large for key')
 
encrypted_text = pow(plain_text, e, n)
print('\nencrypted text integer  ', encrypted_text)
 
decrypted_text = pow(encrypted_text, d, n)
print('\ndecrypted text integer  ', decrypted_text)
 
#print('message                 ', binascii.unhexlify(hex(decrypted_text)[2:]).decode())     # [2:] slicing, to strip the 0x part 
